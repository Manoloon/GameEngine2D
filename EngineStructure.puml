@startuml
'https://plantuml.com/class-diagram
class GameEngine
abstract Scene
class Scene_Play
class Scene_Menu
Scene <|-- Scene_Menu
Scene <|-- Scene_Play

class Game
class EntityManager
class Entity
class Components
{
<interface>
}
class assets
class Animation
class Action

class CTransform
{
pos: Vec2
speed: Vec2
scale: Vec2
angle: float
CTransform(pos,velocity,angle)
}
Entity<|--Components
Components<|--CTransform
Components<|---CInput
Components<|--CLifespan
Components<|---CScore
Components<|--CCollision
Components<|---CShape
class CCollision
{
radius: float
CCollision(float r)
}
class CLifespan
{
remaining:int
total:int
CLifespan(int remain, int total)
}
class CScore
{
score: int
CScore(int s)
}

class CInput
{
up:bool
left:bool
right:bool
down:bool
shoot:bool
SecShoot:bool
}
class CShape
{
shape:sf::CircleShape
CShape(radius,points,colorFill,colOutline,thickness)
}
class Game {
m_window    : sf::RenderWindow
m_entities  : EntityManager
m_player    : Entity
m_paused    : bool
m_running   : bool
init()      : void
update()    : void
// Systems()
sMovement()     : void
sUserInput()    : void
sRender()       : void
sEnemySpawner() : void
sCollision()    : void
}

class EntityManager
{
m_entities: vector<Entity>
m_entityMap: map<string,Entity>
m_toAdd: vector<Entity>
init(): void
update(): void
addEntity(args): sp<Entity>
getEntities(): vector<sp<Entity>>&
getEntities(s): vector<sp<Entity>>&
}

class Entity
{
m_tag       : string
m_active    : bool
m_id        : size_t
//Components
cTransform: CTransform
cShape:    CShape
cCollision: CCollision
cInput:     CInput
cScore:     CScore
cLifespan:  CLifespan
destroy():void
isActive():bool
tag():string &
id(): size_t
}

class GameEngine
{
m_scenes : map<string,Scene>
m_window : sf::RenderWindow
m_assets : Assets
m_currentScene : string
m_running : bool
init() : void
currentScene() Scene*
run() : void
update(): void
quit() : void
changeScene(scene) : void
getAssets() : Assets &
window() : Window &
sUserInput() : void
}
abstract Scene
{
m_game : GameEngine *
m_entities : EntityManager
m_currentFrame : int
m_actionMap : map<int,string>
m_paused : bool
m_hasEnded : bool
update() : void=0
sDoAction(action) : void=0
sRender() : void=0
simulate(int) : void
doAction(action) : void
registerAction(action) : void
}

class Scene_Play
{
m_levelPath     :   string
m_player        :   m_entity
playerConfig    :   PlayerConfig
init()          :   void
update()        :   void
// Systems()
sAnimation()    :   void
sMovement()     :   void
sEnemySpawner() :   void
sCollision()    :   void
sRender()       :   void
sDoAction()     :   void
sDebug()        :   void
}
class Scene_Menu
{
m_menuStrings   :   vec<string>
m_menuText      :   sf::Text
}
@enduml